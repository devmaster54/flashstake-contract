/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FlashProtocolInterface extends ethers.utils.Interface {
  functions: {
    "FLASH_TOKEN()": FunctionFragment;
    "balances(address)": FunctionFragment;
    "getFPY(uint256)": FunctionFragment;
    "getMatchedAmount(uint256)": FunctionFragment;
    "getMintAmount(uint256,uint256)": FunctionFragment;
    "getPercentStaked(uint256)": FunctionFragment;
    "matchRatio()": FunctionFragment;
    "matchReceiver()": FunctionFragment;
    "setMatchRatio(uint256)": FunctionFragment;
    "setMatchReceiver(address)": FunctionFragment;
    "stake(uint256,uint256,address,bytes)": FunctionFragment;
    "stakes(bytes32)": FunctionFragment;
    "unstake(bytes32,uint256)": FunctionFragment;
    "unstakeEarly(bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FLASH_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getFPY",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMatchedAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPercentStaked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "matchRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "matchReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMatchRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMatchReceiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "stakes", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeEarly",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "FLASH_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFPY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMatchedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPercentStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "matchRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "matchReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMatchRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMatchReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeEarly",
    data: BytesLike
  ): Result;

  events: {
    "Staked(bytes32,uint256,uint256,uint256,uint256,address,address)": EventFragment;
    "Unstaked(bytes32,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
}

export class FlashProtocol extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FlashProtocolInterface;

  functions: {
    FLASH_TOKEN(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "FLASH_TOKEN()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getFPY(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getFPY(uint256)"(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getMatchedAmount(
      mintedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getMatchedAmount(uint256)"(
      mintedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getMintAmount(
      _amountIn: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getMintAmount(uint256,uint256)"(
      _amountIn: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getPercentStaked(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getPercentStaked(uint256)"(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    matchRatio(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "matchRatio()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    matchReceiver(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "matchReceiver()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setMatchRatio(
      _newMatchRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMatchRatio(uint256)"(
      _newMatchRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMatchReceiver(
      _newMatchReceiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMatchReceiver(address)"(
      _newMatchReceiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stake(
      _amountIn: BigNumberish,
      _days: BigNumberish,
      _receiver: string,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stake(uint256,uint256,address,bytes)"(
      _amountIn: BigNumberish,
      _days: BigNumberish,
      _receiver: string,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amountIn: BigNumber;
      initiation: BigNumber;
      expireAfter: BigNumber;
      mintedAmount: BigNumber;
      staker: string;
      receiver: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
      5: string;
    }>;

    "stakes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amountIn: BigNumber;
      initiation: BigNumber;
      expireAfter: BigNumber;
      mintedAmount: BigNumber;
      staker: string;
      receiver: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
      5: string;
    }>;

    unstake(
      _id: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unstake(bytes32,uint256)"(
      _id: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unstakeEarly(
      _id: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unstakeEarly(bytes32,uint256)"(
      _id: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  FLASH_TOKEN(overrides?: CallOverrides): Promise<string>;

  "FLASH_TOKEN()"(overrides?: CallOverrides): Promise<string>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balances(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFPY(
    _amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getFPY(uint256)"(
    _amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMatchedAmount(
    mintedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMatchedAmount(uint256)"(
    mintedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMintAmount(
    _amountIn: BigNumberish,
    _days: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMintAmount(uint256,uint256)"(
    _amountIn: BigNumberish,
    _days: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPercentStaked(
    _amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPercentStaked(uint256)"(
    _amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  matchRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "matchRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  matchReceiver(overrides?: CallOverrides): Promise<string>;

  "matchReceiver()"(overrides?: CallOverrides): Promise<string>;

  setMatchRatio(
    _newMatchRatio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMatchRatio(uint256)"(
    _newMatchRatio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMatchReceiver(
    _newMatchReceiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMatchReceiver(address)"(
    _newMatchReceiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stake(
    _amountIn: BigNumberish,
    _days: BigNumberish,
    _receiver: string,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stake(uint256,uint256,address,bytes)"(
    _amountIn: BigNumberish,
    _days: BigNumberish,
    _receiver: string,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakes(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amountIn: BigNumber;
    initiation: BigNumber;
    expireAfter: BigNumber;
    mintedAmount: BigNumber;
    staker: string;
    receiver: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: string;
    5: string;
  }>;

  "stakes(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amountIn: BigNumber;
    initiation: BigNumber;
    expireAfter: BigNumber;
    mintedAmount: BigNumber;
    staker: string;
    receiver: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: string;
    5: string;
  }>;

  unstake(
    _id: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unstake(bytes32,uint256)"(
    _id: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unstakeEarly(
    _id: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unstakeEarly(bytes32,uint256)"(
    _id: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    FLASH_TOKEN(overrides?: CallOverrides): Promise<string>;

    "FLASH_TOKEN()"(overrides?: CallOverrides): Promise<string>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFPY(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFPY(uint256)"(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMatchedAmount(
      mintedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMatchedAmount(uint256)"(
      mintedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintAmount(
      _amountIn: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMintAmount(uint256,uint256)"(
      _amountIn: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPercentStaked(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPercentStaked(uint256)"(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "matchRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    matchReceiver(overrides?: CallOverrides): Promise<string>;

    "matchReceiver()"(overrides?: CallOverrides): Promise<string>;

    setMatchRatio(
      _newMatchRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMatchRatio(uint256)"(
      _newMatchRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMatchReceiver(
      _newMatchReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMatchReceiver(address)"(
      _newMatchReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      _amountIn: BigNumberish,
      _days: BigNumberish,
      _receiver: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "stake(uint256,uint256,address,bytes)"(
      _amountIn: BigNumberish,
      _days: BigNumberish,
      _receiver: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    stakes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amountIn: BigNumber;
      initiation: BigNumber;
      expireAfter: BigNumber;
      mintedAmount: BigNumber;
      staker: string;
      receiver: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
      5: string;
    }>;

    "stakes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amountIn: BigNumber;
      initiation: BigNumber;
      expireAfter: BigNumber;
      mintedAmount: BigNumber;
      staker: string;
      receiver: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
      5: string;
    }>;

    unstake(
      _id: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unstake(bytes32,uint256)"(
      _id: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeEarly(
      _id: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      withdrawAmount: BigNumber;
      burnAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "unstakeEarly(bytes32,uint256)"(
      _id: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      withdrawAmount: BigNumber;
      burnAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;
  };

  filters: {
    Staked(
      _id: null,
      _amountIn: null,
      _initiation: null,
      _expireAfter: null,
      _mintedAmount: null,
      _staker: string | null,
      _receiver: string | null
    ): EventFilter;

    Unstaked(_id: null, _amountIn: null, _staker: string | null): EventFilter;
  };

  estimateGas: {
    FLASH_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    "FLASH_TOKEN()"(overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFPY(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFPY(uint256)"(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMatchedAmount(
      mintedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMatchedAmount(uint256)"(
      mintedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintAmount(
      _amountIn: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMintAmount(uint256,uint256)"(
      _amountIn: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPercentStaked(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPercentStaked(uint256)"(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "matchRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    matchReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    "matchReceiver()"(overrides?: CallOverrides): Promise<BigNumber>;

    setMatchRatio(
      _newMatchRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMatchRatio(uint256)"(
      _newMatchRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMatchReceiver(
      _newMatchReceiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMatchReceiver(address)"(
      _newMatchReceiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stake(
      _amountIn: BigNumberish,
      _days: BigNumberish,
      _receiver: string,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stake(uint256,uint256,address,bytes)"(
      _amountIn: BigNumberish,
      _days: BigNumberish,
      _receiver: string,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "stakes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(
      _id: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unstake(bytes32,uint256)"(
      _id: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unstakeEarly(
      _id: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unstakeEarly(bytes32,uint256)"(
      _id: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FLASH_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FLASH_TOKEN()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFPY(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFPY(uint256)"(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMatchedAmount(
      mintedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMatchedAmount(uint256)"(
      mintedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintAmount(
      _amountIn: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMintAmount(uint256,uint256)"(
      _amountIn: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPercentStaked(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPercentStaked(uint256)"(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "matchRatio()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    matchReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "matchReceiver()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMatchRatio(
      _newMatchRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMatchRatio(uint256)"(
      _newMatchRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMatchReceiver(
      _newMatchReceiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMatchReceiver(address)"(
      _newMatchReceiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stake(
      _amountIn: BigNumberish,
      _days: BigNumberish,
      _receiver: string,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stake(uint256,uint256,address,bytes)"(
      _amountIn: BigNumberish,
      _days: BigNumberish,
      _receiver: string,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstake(
      _id: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unstake(bytes32,uint256)"(
      _id: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unstakeEarly(
      _id: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unstakeEarly(bytes32,uint256)"(
      _id: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
